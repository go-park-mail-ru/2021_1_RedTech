// Code generated by MockGen. DO NOT EDIT.
// Source: Redioteka/internal/pkg/domain (interfaces: ActorRepository)

// Package mock is a generated GoMock package.
package mock

import (
	domain "Redioteka/internal/pkg/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockActorRepository is a mock of ActorRepository interface.
type MockActorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockActorRepositoryMockRecorder
}

// MockActorRepositoryMockRecorder is the mock recorder for MockActorRepository.
type MockActorRepositoryMockRecorder struct {
	mock *MockActorRepository
}

// NewMockActorRepository creates a new mock instance.
func NewMockActorRepository(ctrl *gomock.Controller) *MockActorRepository {
	mock := &MockActorRepository{ctrl: ctrl}
	mock.recorder = &MockActorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorRepository) EXPECT() *MockActorRepositoryMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockActorRepository) GetById(arg0 uint) (domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockActorRepositoryMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockActorRepository)(nil).GetById), arg0)
}

// GetByMovie mocks base method.
func (m *MockActorRepository) GetByMovie(arg0 uint) ([]*domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMovie", arg0)
	ret0, _ := ret[0].([]*domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMovie indicates an expected call of GetByMovie.
func (mr *MockActorRepositoryMockRecorder) GetByMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMovie", reflect.TypeOf((*MockActorRepository)(nil).GetByMovie), arg0)
}

// Search mocks base method.
func (m *MockActorRepository) Search(arg0 string) ([]domain.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].([]domain.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockActorRepositoryMockRecorder) Search(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockActorRepository)(nil).Search), arg0)
}
